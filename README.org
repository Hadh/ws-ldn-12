* thi.ng/ws-ldn-12
ARM / STM32F7 DIY synth workshop (STM32F746-DISCO)

[[http://workshop.thi.ng/#WS-LDN-12][Workshop details & signup]]

** Resources

- http://asm.thi.ng/ - links to all required SDK & build tools,
  references, learning resources...

** Examples
*** ex01 - blinky

[[./src/ex01/main.c][Source]]

Simple Hello World LED blink example & demo of using EXTI interrupt to
react to user button. Stops/starts blinking each time button is
pressed.

*** ex02 - LCD, touchscreen & GUI basics

[[./src/ex02/main.c][Source]]

Basic demonstration of working with BSP LCD & touchscreen modules, as
well as intro to working w/ external libraries (here
[[http://thi.ng/ct-gui][thi.ng/ct-gui]]).

Edit the source file to uncomment different demo modes:

- =demoWelcome()= - simple text rendering & random dots, non-interactive
- =demoScribble()= - 5 point multi-touch drawing
- =demoGUI()= - basic GUI usage example (dials control nothing)

*** ex03 - Timers

[[./src/ex03/main.c][Source]]

Basic timer setup & multi-tasking example. Timer runs @ 10kHz and
controls simple LED blinking task. Task can be suspended interactively
by pressing user button.

*** ex04 - Oscillators

[[./src/ex04/main.c][Source]]

Simple oscillator & frequency modulation experiment. The following
oscillator types are supported for both main osc & modulator:

| *ID* | *Type*                        |
|------+-------------------------------|
|    0 | Sine                          |
|    1 | Saw                           |
|    2 | Square                        |
|    3 | Triangle                      |
|    4 | Saw + Sin                     |
|    5 | Noise (uses [[http://xoroshiro.di.unimi.it/][Xorshift128]] PRNG) |

*Important:* The =mod_amp= field of the =Oscillator= struct is the
 modulation amplitude, but since the modulator is acting in the
 frequency domain, this amplitude too is in Hz.

*** ex05 - USB stick WAV file streaming playback

[[./src/ex05/main.c][Source]]

This example uses the STM USB Host library & FatFS to access a USB
memory stick connected to the board. Once USB handshake is complete,
the app will then attempt to read the file =sound.wav= located in the
root of the USB filesystem and start streaming to the headphone audio
output (looping playback).

*Important:*
- The WAV file MUST be in 44.1kHz, 16bit stereo format
- The example is currently configured to use the USB FS (fullspeed)
  port (not HS (highspeed)). This can be changed via the
  =ex05/usbh_conf.h= file.

*** ex06 - thi.ng/synstack basics

[[./src/ex06/main.c][Source]]

First example using [[http://thi.ng/synstack][thi.ng/synstack]] to implement polyphonic synth with
fully configurable node based DSP graph (1 graph per voice). The graph
implemented is shown below.

We also define a musical scale to play a randomized, but always
harmonic sequence and show how to dynamically modify parameters of the
DSP node.

#+BEGIN_SRC dot :file assets/ex06-dag.png :exports results
digraph g {
  rankdir=LR;
  node[color="black",style="filled",fontname="Inconsolata",fontcolor="white",fontsize=11];
  edge[fontname="Inconsolata",fontsize=9];

  env[label="AD(S)R"];
  osc1[label="osc #1\n(spiral)"];
  osc2[label="osc #2\n(saw-sin)"];
  mul1[shape="circle",label="*"];
  mul2[shape="circle",label="*"];
  sum[shape="circle",label="+"];
  fb[label="foldback\ndistortion"];
  filter[label="biquad LPF\n(randomized)"];
  pan[label="stereo pan"];
  delay[label="delay"];
  env -> mul1;
  env -> mul2;
  osc1 -> mul1 -> sum;
  osc2 -> mul2 -> sum;
  sum -> fb -> filter -> pan -> delay;
}
#+END_SRC

#+RESULTS:
[[file:assets/ex06-dag.png]]

** Building

This repo contains a flexible =Makefile= to build all included
projects. The setup features:

- easily customizable device config & linker scripts
- no requirement to manually copy STM Cube SDK sources
- catalog file(s) to selectively exclude various SDK source files (see
  [[./make/sources.txt][/make/sources.txt]], can be overridden per project)
- config flags to include USBH & FatFs middlewares
- support for multiple sub-projects (with & without shared sources)
- individual module (sub-project) configs (e.g. [[./make/modules/ex01.make][/make/modules/ex01.make]])
- separate build & target folders for each module

Currently only the STM32F746-DISCO board is supported, but additional
board configurations can be easily added (see [[./make/devices/][/make/devices/]] for
reference).

*IMPORTANT:* The =Makefile= requires the env var =STM_CUBE_HOME= to be
set to the root of your STM SDK directory, e.g.
=~/dev/arm/STM32Cube_FW_F7_V1.4.0=.

#+BEGIN_SRC shell
  export STM_CUBE_HOME=~/dev/arm/STM32Cube_FW_F7_V1.4.0

  make module=ex01 clean
  make module=ex01 -j4

  # flash device
  st-flash --reset write bin/ex01/app.bin 0x8000000
#+END_SRC

** Contributors

| *Name*          | *Role*                          | *Website* |
| [[mailto:k@thi.ng][Karsten Schmidt]] | initiator & principal developer | [[http://thi.ng][thi.ng]]    |

** License

This project is open source and licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache Software License 2.0]].
